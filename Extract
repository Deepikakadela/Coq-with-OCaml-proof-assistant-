
/* specify the language that has to be extracted*/

Extraction Language Ocaml.

/*load some coq environments*/

Require Import Coq.Arith.Arith.
Require Import Coq.Arith.EqNat.
Require Import ImpCEvalFun.

/* tell coq the name of the definition to be extracted*/

Extraction "imp1.ml" ceval_step.
/*STOP HERE*/

Extract Inductive bool ⇒ "bool" [ "true" "false" ].
Extract Inductive nat ⇒ "int"
  [ "0" "(fun x → x + 1)" ]
  "(fun zero succ n →
      if n=0 then zero () else succ (n-1))".
      
 Extract Constant plus ⇒ "( + )".
Extract Constant mult ⇒ "( * )".
Extract Constant beq_nat ⇒ "( = )".

 Extract Constant minus ⇒ "( - )".
 Extraction "imp2.ml" ceval_step.
